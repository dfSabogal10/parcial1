{
  "name": "babel-preset-env",
  "version": "1.1.8",
  "description": "A Babel preset for each environment.",
  "author": {
    "name": "Henry Zhu",
    "email": "hi@henryzoo.com"
  },
  "homepage": "https://babeljs.io/",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/babel/babel-preset-env"
  },
  "main": "lib/index.js",
  "scripts": {
    "build": "rimraf lib && babel src -d lib",
    "build-data": "node ./scripts/build-data.js",
    "dev": "babel -w src -d lib",
    "lint": "eslint .",
    "fix": "eslint . --fix",
    "ci": "npm run test",
    "changelog": "git log `git describe --tags --abbrev=0`..HEAD --pretty=format:' * %s (%an)' | grep -v 'Merge pull request'",
    "test": "npm run build && mocha ./test --compilers js:babel-register -t 5000"
  },
  "dependencies": {
    "babel-plugin-check-es2015-constants": "^6.3.13",
    "babel-plugin-syntax-trailing-function-commas": "^6.13.0",
    "babel-plugin-transform-async-to-generator": "^6.8.0",
    "babel-plugin-transform-es2015-arrow-functions": "^6.3.13",
    "babel-plugin-transform-es2015-block-scoped-functions": "^6.3.13",
    "babel-plugin-transform-es2015-block-scoping": "^6.6.0",
    "babel-plugin-transform-es2015-classes": "^6.6.0",
    "babel-plugin-transform-es2015-computed-properties": "^6.3.13",
    "babel-plugin-transform-es2015-destructuring": "^6.6.0",
    "babel-plugin-transform-es2015-duplicate-keys": "^6.6.0",
    "babel-plugin-transform-es2015-for-of": "^6.6.0",
    "babel-plugin-transform-es2015-function-name": "^6.3.13",
    "babel-plugin-transform-es2015-literals": "^6.3.13",
    "babel-plugin-transform-es2015-modules-amd": "^6.8.0",
    "babel-plugin-transform-es2015-modules-commonjs": "^6.6.0",
    "babel-plugin-transform-es2015-modules-systemjs": "^6.12.0",
    "babel-plugin-transform-es2015-modules-umd": "^6.12.0",
    "babel-plugin-transform-es2015-object-super": "^6.3.13",
    "babel-plugin-transform-es2015-parameters": "^6.6.0",
    "babel-plugin-transform-es2015-shorthand-properties": "^6.3.13",
    "babel-plugin-transform-es2015-spread": "^6.3.13",
    "babel-plugin-transform-es2015-sticky-regex": "^6.3.13",
    "babel-plugin-transform-es2015-template-literals": "^6.6.0",
    "babel-plugin-transform-es2015-typeof-symbol": "^6.6.0",
    "babel-plugin-transform-es2015-unicode-regex": "^6.3.13",
    "babel-plugin-transform-exponentiation-operator": "^6.8.0",
    "babel-plugin-transform-regenerator": "^6.6.0",
    "browserslist": "^1.4.0"
  },
  "devDependencies": {
    "babel-cli": "^6.11.4",
    "babel-eslint": "^7.1.1",
    "babel-helper-plugin-test-runner": "^6.18.0",
    "babel-plugin-transform-flow-strip-types": "^6.8.0",
    "babel-preset-es2015": "^6.14.0",
    "babel-register": "^6.14.0",
    "compat-table": "kangax/compat-table#e732718eab42c6c83a364450f456474638d31f94",
    "eslint": "^3.3.1",
    "eslint-config-babel": "^3.0.0",
    "eslint-plugin-babel": "^4.0.0",
    "eslint-plugin-flowtype": "^2.29.1",
    "lodash": "^4.15.0",
    "mocha": "^3.0.2",
    "rimraf": "^2.5.4"
  },
  "babel": {
    "presets": [
      [
        "es2015",
        {
          "loose": true
        }
      ]
    ],
    "plugins": [
      "transform-flow-strip-types"
    ]
  },
  "readme": "# babel-preset-env [![npm](https://img.shields.io/npm/v/babel-preset-env.svg)](https://www.npmjs.com/package/babel-preset-env) [![travis](https://img.shields.io/travis/babel/babel-preset-env/master.svg)](https://travis-ci.org/babel/babel-preset-env) [![npm-downloads](https://img.shields.io/npm/dm/babel-preset-env.svg)](https://www.npmjs.com/package/babel-preset-env)\n\n> A Babel preset that can automatically determine the Babel plugins and polyfills you need based on your supported environments.\n\n```sh\nnpm install babel-preset-env --save-dev\n```\n\n```js\n{\n  \"presets\": [\n    [\"env\", {\n      \"targets\": {\n        \"browsers\": [\"last 2 versions\", \"safari >= 7\"]\n      }\n    }]\n  ]\n}\n```\n\nCheck out the many options (especially `useBuiltIns` to polyfill less)!\n\n- [How it Works](#how-it-works)\n- [Install](#install)\n- [Usage](#usage)\n- [Options](#options)\n- [Examples](#examples)\n- [Caveats](#caveats)\n- [Other Cool Projects](#other-cool-projects)\n  \n## How it Works\n\n### Determine environment support for ECMAScript features\n\nUse external data such as [`compat-table`](https://github.com/kangax/compat-table) to determine browser support. (We should create PRs there when necessary)\n\n![](https://cloud.githubusercontent.com/assets/588473/19214029/58deebce-8d48-11e6-9004-ee3fbcb75d8b.png)\n\nWe can periodically run [build-data.js](https://github.com/babel/babel-preset-env/blob/master/scripts/build-data.js) which generates [plugins.json](https://github.com/babel/babel-preset-env/blob/master/data/plugins.json).\n\nRef: [#7](https://github.com/babel/babel-preset-env/issues/7)\n\n### Maintain a mapping between JavaScript features and Babel plugins\n\n> Currently located at [plugin-features.js](https://github.com/babel/babel-preset-env/blob/master/data/plugin-features.js).\n\nThis should be straightforward to do in most cases. There might be cases were plugins should be split up more or certain plugins aren't standalone enough (or impossible to do).\n\n### Support all plugins in Babel that are considered `latest`\n\n> Default behavior without options is the same as `babel-preset-latest`.\n\nIt won't include `stage-x` plugins. env will support all plugins in what we consider the latest version of Javascript (by matching what we do in [`babel-preset-latest`](http://babeljs.io/docs/plugins/preset-latest/)).\n\nRef: [#14](https://github.com/babel/babel-preset-env/issues/14)\n\n### Determine the lowest common denominator of plugins to be included in the preset\n\nIf you are targeting IE 8 and Chrome 55 it will include all plugins required by IE 8 since you would need to support both still.\n\n### Support a target option `\"node\": \"current\"` to compile for the currently running node version.\n\nFor example, if you are building on Node 4, arrow functions won't be converted, but they will if you build on Node 0.12.\n\n### Support a `browsers` option like autoprefixer\n\nUse [browserslist](https://github.com/ai/browserslist) to declare supported environments by performing queries like `> 1%, last 2 versions`.\n\nRef: [#19](https://github.com/babel/babel-preset-env/pull/19)\n\n## Install\n\n```sh\nnpm install --save-dev babel-preset-env\n```\n\n## Usage\n\nThe default behavior without options runs all transforms (behaves the same as [babel-preset-latest](https://babeljs.io/docs/plugins/preset-latest/)).\n\n```js\n{\n  \"presets\": [\"env\"]\n}\n```\n\n## Options\n\nFor more information on setting options for a preset, refer to the [plugin/preset options](http://babeljs.io/docs/plugins/#plugin-preset-options) documentation.\n\n### `targets`\n\n`{ [string]: number }`, defaults to `{}`.\n\nTakes an object of environment versions to support.\n\nEach target environment takes a number (you can also specify a minor versions like `node: 6.5`)\n\nExample environments: `chrome`, `opera`, `edge`, `firefox`, `safari`, `ie`, `ios`, `android`, `node`, `electron`.\n\nThe [data](https://github.com/babel/babel-preset-env/blob/master/data/plugins.json) for this is generated by running the [build-data script](https://github.com/babel/babel-preset-env/blob/master/scripts/build-data.js) which pulls in data from [compat-table](https://kangax.github.io/compat-table).\n\n### `targets.node`\n\n`number | \"current\" | true`\n\nIf you want to compile against the current node version, you can specify `\"node\": true` or `\"node\": \"current\"`, which would be the same as `\"node\": parseFloat(process.versions.node)`.\n\n### `targets.browsers`\n\n`Array<string> | string`\n\nA query to select browsers (ex: last 2 versions, > 5%) using [browserslist](https://github.com/ai/browserslist).  \n\nNote, browsers' results are overridden by explicit items from `targets`.\n\n### `loose`\n\n`boolean`, defaults to `false`.\n    \nEnable \"loose\" transformations for any plugins in this preset that allow them.\n\n### `modules`\n\n`\"amd\" | \"umd\" | \"systemjs\" | \"commonjs\" | false`, defaults to `\"commonjs\"`.\n\nEnable transformation of ES6 module syntax to another module type.\n    \nSetting this to `false` will not transform modules.\n\n### `debug`\n\n`boolean`, defaults to `false`.\n    \nOutputs the targets/plugins used and the version specified in [plugin data version](https://github.com/babel/babel-preset-env/blob/master/data/plugins.json) to `console.log`.\n\n### `include`\n\n`Array<string>`, defaults to `[]`.\n\n> NOTE: `whitelist` is deprecated and will be removed in the next major in favor of this.\n\nAn array of plugins to always include.\n\nValid options include any of the [babel plugins](https://github.com/babel/babel-preset-env/blob/master/data/plugin-features.js) or [built-ins](https://github.com/babel/babel-preset-env/blob/master/data/built-in-features.js), such as `transform-es2015-arrow-functions`, `map`, `set`, or `object.assign`.\n\nThis option is useful if there is a bug in a native implementation, or a combination of a non-supported feature + a supported one doesn't work.\n\nFor example, Node 4 supports native classes but not spread. If `super` is used with a spread argument, then the `transform-es2015-classes` transform needs to be `include`d, as it is not possible to transpile a spread with `super` otherwise.\n\n### `exclude`\n\n`Array<string>`, defaults to `[]`.\n    \nAn array of plugins to always exclude/remove.\n\nThe possible options are the same as the `include` option.\n\nThis option is useful for \"blacklisting\" a transform like `transform-regenerator` if you don't use generators and don't want to include `regeneratorRuntime` (when using `useBuiltIns`) or for using another plugin like [fast-async](https://github.com/MatAtBread/fast-async) instead of [Babel's async-to-gen](http://babeljs.io/docs/plugins/transform-async-generator-functions/).\n\n### `useBuiltIns`\n\n`boolean`, defaults to `false`.\n\nA way to apply `babel-preset-env` for polyfills (via \"babel-polyfill\").\n\n> NOTE: This does not currently polyfill experimental/stage-x built-ins like the regular \"babel-polyfill\" does.\n> This will only work with npm >= 3 (which should be used with Babel 6 anyway)\n\n```\nnpm install babel-polyfill --save\n```\n\nThis option enables a new plugin that replaces the statement `import \"babel-polyfill\"` or `require(\"babel-polyfill\")` with individual requires for `babel-polyfill` based on environment.\n\n> NOTE: Only use `require(\"babel-polyfill\");` once in your whole app. One option is to create a single entry file that only contains the require statement.\n\n**In**\n\n```js\nimport \"babel-polyfill\";\n```\n\n**Out (different based on environment)**\n\n```js\nimport \"core-js/modules/es7.string.pad-start\";\nimport \"core-js/modules/es7.string.pad-end\";\nimport \"core-js/modules/web.timers\";\nimport \"core-js/modules/web.immediate\";\nimport \"core-js/modules/web.dom.iterable\";\n```\n\nThis will also work for `core-js` directly (`import \"core-js\";`)\n\n```\nnpm install core-js --save\n```\n\n---\n\n## Examples\n\n```js\n// src\nexport class A {}\n```\n\n```js\n// target chrome 52\n{\n  \"presets\": [\n    [\"env\", {\n      \"targets\": {\n        \"chrome\": 52\n      }\n    }]\n  ]\n}\n\n// ...\n\nclass A {}\nexports.A = A;\n```\n\n```js\n// target chrome 52 with webpack 2/rollup and loose mode\n{\n  \"presets\": [\n    [\"env\", {\n      \"targets\": {\n        \"chrome\": 52\n      },\n      \"modules\": false,\n      \"loose\": true\n    }]\n  ]\n}\n\n// ...\n\nexport class A {}\n```\n\n```js\n// using browserslist\n{\n  \"presets\": [\n    [\"env\", {\n      \"targets\": {\n        \"chrome\": 52,\n        \"browsers\": [\"last 2 versions\", \"safari 7\"]\n      }\n    }]\n  ]\n}\n\n// ...\n\nexport var A = function A() {\n  _classCallCheck(this, A);\n};\n```\n\n### Example with `node: true` or `node: \"current\"`\n\n```js\n// process.versions.node -> 6.9.0\n{\n  \"presets\": [\n    [\"env\", {\n      \"targets\": {\n        \"node\": \"current\"\n      }\n    }]\n  ]\n}\n\n// ...\n\nclass A {}\nexports.A = A;\n```\n\n### Example with `debug: true`\n\n```js\nUsing targets: {\n  \"node\": 6.5\n}\n\nUsing plugins:\n\nmodule: false\ntransform-exponentiation-operator {}\ntransform-async-to-generator {}\nsyntax-trailing-function-commas {}\n```\n\n### Example with `include`/`exclude`\n\n> always include arrow functions, explicitly exclude generators\n\n```js\n{\n  \"presets\": [\n    [\"env\", {\n      \"targets\": {\n        \"browsers\": [\"last 2 versions\", \"safari >= 7\"]\n      },\n      \"include\": [\"transform-es2015-arrow-functions\", \"es6.map\"],\n      \"exclude\": [\"transform-regenerator\", \"es6.set\"]\n    }]\n  ]\n}\n```\n\n## Caveats\n\nIf you get a `SyntaxError: Unexpected token ...` error when using the [object-rest-spread](https://github.com/babel/babel/tree/master/packages/babel-plugin-transform-object-rest-spread) transform then make sure the plugin has been updated to, at least, `v6.19.0`.\n\n## Other Cool Projects\n\n- [auto-babel](https://github.com/jakepusateri/auto-babel)\n- [babel-preset-target](https://github.com/sdkennedy/babel-preset-target)\n- [babel-preset-modern-node](https://github.com/michaelcontento/babel-preset-modern-node)\n- [babel-preset-modern-browsers](https://github.com/christophehurpeau/babel-preset-modern-browsers)\n- ?\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/babel/babel-preset-env/issues"
  },
  "_id": "babel-preset-env@1.1.8",
  "dist": {
    "shasum": "40a255eaf9054bd40eb4b4d2975477305458cd5f"
  },
  "_from": "babel-preset-env@1.1.8",
  "_resolved": "https://registry.npmjs.org/babel-preset-env/-/babel-preset-env-1.1.8.tgz"
}
